name: Tests

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

jobs:
  # linux-aarch64-native:
  #   name: Linux / aarch64-unknown-linux-gnu (native)
  #   runs-on:
  #     - ubuntu-latest
  #     - ARM64
  #   strategy:
  #     fail-fast: false

  #   env:
  #     CARGO_TERM_COLOR: always

  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           target
  #         key: ${{ runner.os }}-aarch64-unknown-linux-gnu-cargo-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-aarch64-unknown-linux-gnu-cargo-

  #     - name: Install Rust target
  #       run: rustup target add aarch64-unknown-linux-gnu

  #     - name: Read crate version
  #       id: ver
  #       run: |
  #         CRATE_VERSION=$(grep -m1 '^version' Cargo.toml | cut -d '"' -f2)
  #         echo "CRATE_VERSION=$CRATE_VERSION" >> $GITHUB_ENV
  #         echo "version=$CRATE_VERSION" >> $GITHUB_OUTPUT

  #     - name: Build ${{ steps.ver.outputs.version }}
  #       run: cargo build --target aarch64-unknown-linux-gnu --verbose

  #     - name: Test
  #       run: cargo test --target aarch64-unknown-linux-gnu --verbose -- --nocapture

  linux:
    name: Linux / ${{ matrix.target }}
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            uses-cross: false
          - target: i686-unknown-linux-gnu
            uses-cross: true
          - target: mipsel-unknown-linux-gnu
            uses-cross: true
          - target: mips64el-unknown-linux-gnuabi64
            uses-cross: true
          - target: mips-unknown-linux-gnu
            uses-cross: true
          - target: mips64-unknown-linux-gnuabi64
            uses-cross: true
          - target: aarch64-unknown-linux-gnu
            uses-cross: true
    env:
      CARGO_TERM_COLOR: always

    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Enable QEMU (all arch)
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Install Rust target
        if: matrix.uses-cross == false
        run: rustup target add ${{ matrix.target }}

      - name: Install cross
        if: matrix.uses-cross == true
        run: cargo install cross --git https://github.com/cross-rs/cross --tag v0.2.5

      - name: Install nightly toolchain
        if: matrix.uses-cross == true
        run: |
          rustup toolchain install nightly
          rustup component add rust-src --toolchain nightly

      - name: Read crate version
        id: ver
        run: |
          CRATE_VERSION=$(grep -m1 '^version' Cargo.toml | cut -d '"' -f2)
          echo "CRATE_VERSION=$CRATE_VERSION" >> $GITHUB_ENV
          echo "version=$CRATE_VERSION" >> $GITHUB_OUTPUT

      - name: Build
        run: |
          if [ "${{ matrix.uses-cross }}" = "true" ]; then
            cross +nightly build --target ${{ matrix.target }} --no-default-features -Z build-std=std,core,alloc  --verbose
          else
            cargo build --target ${{ matrix.target }}  --verbose
          fi

      - name: Test
        run: |
          if [ "${{ matrix.uses-cross }}" = "true" ]; then
            cross +nightly test --target ${{ matrix.target }} -Z build-std=std,core,alloc --verbose -- --nocapture
          else
            cargo test --target ${{ matrix.target }} --verbose -- --nocapture
          fi

      - name: Copy compiled test binaries
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          rm -rf upload && mkdir -p upload
          find target/aarch64-unknown-linux-gnu/debug/deps \
              -maxdepth 1 -type f -perm -111 \
              -exec cp {} upload/ \;

      - uses: actions/upload-artifact@v4
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        with:
          name: aarch64-tests
          path: upload
          if-no-files-found: error

  mac:
    name: macOS / ${{ matrix.target }}
    runs-on: macos-14

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
            uses-cross: false
          - target: x86_64-apple-darwin
            uses-cross: false

    env:
      CARGO_TERM_COLOR: always

    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Read crate version
        id: ver
        run: |
          CRATE_VERSION=$(grep -m1 '^version' Cargo.toml | cut -d '"' -f2)
          echo "CRATE_VERSION=$CRATE_VERSION" >> $GITHUB_ENV
          echo "version=$CRATE_VERSION" >> $GITHUB_OUTPUT

      - name: Build ${{ steps.ver.outputs.version }}
        run: |
          cargo rustc --target ${{ matrix.target }} -- --print cfg
          cargo build --target ${{ matrix.target }} --verbose

      - name: Test
        run: cargo test --target ${{ matrix.target }} --verbose -- --nocapture

  # linux-arm64:
  #   runs-on:
  #     - self-hosted
  #     - linux
  #     - arm64
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Install Rust nightly + rust-src
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: nightly
  #         components: rust-src
  #         override: true
  #         profile: minimal

  #     - name: Build for AArch64
  #       run: |
  #         cargo +nightly build -Z build-std=std,core,alloc --verbose

  #     - name: Test
  #       run: cargo +nightly test -Z build-std=std,core,alloc --verbose -- --nocapture

  windows:
    name: Windows - ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest] #, windows-arm64]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy

      - name: Build
        run: |
          cargo rustc -- --print cfg
          cargo build --verbose

      - name: Test
        run: cargo test --verbose -- --nocapture

  run-tests-arm64:
    needs: linux
    runs-on: [self-hosted, linux, ARM64]  # или ubuntu-22.04 с arch=arm64, если есть
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: aarch64-tests
          path: tests/bin

      - name: Run uploaded tests
        run: |
          cd tests/bin
          chmod +x *
          for bin in *; do
            echo "=== $bin ==="
            ./"$bin" --nocapture
          done
